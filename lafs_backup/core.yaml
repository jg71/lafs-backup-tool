### Default (baseline) configuration parameters.
### DO NOT ever change this config, use -c commandline option instead!

# Note that this file is YAML, so YAML types can be used here, see http://yaml.org/type/
# For instance, large number can be specified as "10_000_000" or "!!float 10e6".

source:
  # Path or glob pattern (to match path) to backup, required
  path: # example: /srv/backups/weekly.*

  queue:
    # Path to intermediate backup queue-file (list of paths to upload), required
    path: # example: /srv/backups/queue.txt
    # Don't rebuild queue-file if it's newer than source.path
    check_mtime: true

  entry_cache:
    # Path to persistent db (sqlite) of remote directory nodes, required
    path: # example: /srv/backups/dentries.sqlite

  # How to pick a path among those matched by "path" glob
  pick_policy: alphasort_last # only one supported


destination:
  # URL of Tahoe-LAFS node webapi
  url: http://localhost:3456/uri

  result: # what to do with a cap (URI) of a resulting tree (with full backup)
    print_to_stdout: true
    # Append the entry to the specified file (creating it, if doesn't exists)
    # Example entry: "2012-10-10T23:12:43.904543 /srv/backups/weekly.2012-10-10 URI:DIR2-CHK:..."
    append_to_file: # example: /srv/backups/lafs_caps
    # Append the entry to specified tahoe-lafs directory (i.e. put it into that dir)
    append_to_lafs_dir: # example: URI:DIR2:...

  encoding:
    xz:
      enabled: true
      options: # see lzma.LZMAOptions, empty = module defaults
      min_size: 5120 # don't compress files smaller than 5 KiB (unless overidden in "path_filter")
      path_filter:
        # List of include/exclude regexp path-rules, similar to "filter" section below.
        # Same as with "filter", rules must start with '+' or '-', but here can also be tuples.
        #  '+' will indicate that file is compressible, if it's size >= "min_size" option (see above).
        # Unlike "filter", rule here can also be a tuple, with number as a first element,
        #  overriding "min_size" parameter for matched (by that rule) paths.
        # If none of the patterns match path, file is handled as if it was matched by '+' rule.

        # - '-\.(gz|bz2|t[gb]z2?|xz|lzma|7z|zip|rar)$'
        # - '-\.(rpm|deb|iso)$'
        # - '-\.(jpe?g|gif|png|mov|avi|ogg|mkv|webm|mp[34g]|flv|flac|ape|pdf|djvu)$'
        # - '-\.(sqlite3?|fossil|fsl)$'
        # - '-\.git/objects/[0-9a-f]+/[0-9a-f]+$'
        # - [500, '\.(txt|csv|log|md|rst|cat|(ba|z|k|c|fi)?sh|env)$']
        # - [500, '\.(cgi|py|p[lm]|php|c|h|[ce]l|lisp|hs|patch|diff|xml|xsl|css|x?html[45]?|js)$']
        # - [500, '\.(co?nf|cfg?|li?st|ini|ya?ml|jso?n|vg|tab)(\.(sample|default|\w+-new))?$']
        # - [500, '\.(unit|service|taget|mount|desktop|rules|rc|menu)$']
        # - [2000, '^/etc/']


http:
  ca_certs_files: /etc/ssl/certs/ca-certificates.crt # can be a list
  debug_requests: false # insecure! logs will contain tahoe caps

  request_pool_options:
    maxPersistentPerHost: 10
    cachedConnectionTimeout: 600
    retryAutomatically: true

  # Allows to define retries for unexpected webapi errors
  # Can be useful if network connection tend to disappear for a while
  # Not applicable to long single-request streaming operations like "check",
  #  because these would have to be restarted on any error in that request anyway
  retry:
    # Number of attempts to try for tahoe webapi requests
    # 1 means "fail at once if webapi returns any unexpected error"
    attempts: 4
    # Seconds to wait between attempts
    # Can be either an float (e.g. 10), or a list like [10, 30, 60, 600],
    #  for different delays between retries on consecutive failures;
    #  last delay will be reused if list is sorter than attempts-1
    delay: [10, 60, 600]


filter:
  # Exclude/include string-patterns (python regexps)
  #  to match relative (to source.path, starting with "/") paths to backup.
  # Must start with '+' or '-', to include or exclude path, respectively.
  # Patterns are matched against each path in order they're listed here.
  # Leaf directories are matched with the trailing slash
  #  (as with rsync) to be distinguishable from files with the same name.
  # If path doesn't match any regexp on the list, it will be included.
  #
  # Examples:
  #  - '+/\.git/config$'   # backup git repository config files
  #  - '-/\.git/'   # *don't* backup any repository objects
  #  - '-/(?i)\.?svn(/.*|ignore)$' # exclude (case-insensitive) svn (or .svn) paths and ignore-lists

  # - '-/(CVS|RCS|SCCS|_darcs|\{arch\})/$'
  # - '-/\.(git|hg|bzr|svn|cvs)(/|ignore|attributes|tags)?$'
  # - '-/=(RELEASE-ID|meta-update|update)$'


operation:
  queue_only: false # only generate upload queue file, don't upload anything
  reuse_queue: false # don't generate upload queue file, use existing one as-is
  disable_deduplication: false # make no effort to de-duplicate data (should still work on tahoe-level for files)

  # Rate limiting might be useful to avoid excessive cpu/net usage on nodes,
  #  and especially when uploading to rate-limited api's (like free cloud storages).
  # Only used when uploading objects to the grid, not when building queue file.
  # Format of each value is "interval[:burst]", where "interval" can be specified as rate (e.g. "1/3e5").
  # Simple token bucket algorithm is used. Empty values mean "no limit".
  # Examples:
  #   "objects: 1/10:50" - 10 objects per second, up to 50 at once (if rate was lower before).
  #   "objects: 0.1:50" - same as above.
  #   "objects: 10:20" - 1 object in 10 seconds, up to 20 at once.
  #   "objects: 5" - make interval between object uploads equal 5 seconds.
  #   "bytes: 1/3e6:50e6" - 3 MB/s max, up to 50 MB/s if connection was underutilized before.
  rate_limit:
    bytes: # limit on rate of *file* bytes upload, example: 1/3e5:20e6
    objects: # limit on rate of uploaded objects, example: 10:50


logging: # see http://docs.python.org/library/logging.config.html
  # "custom" level means WARNING/DEBUG/NOISE, depending on CLI options
  warnings: true # capture python warnings
  sql_queries: false # log executed sqlite queries (very noisy, caps will be there)

  version: 1
  formatters:
    basic:
      format: '%(asctime)s :: %(name)s :: %(levelname)s: %(message)s'
      datefmt: '%Y-%m-%d %H:%M:%S'
  handlers:
    console:
      class: logging.StreamHandler
      stream: ext://sys.stderr
      formatter: basic
      level: custom
    # debug_logfile:
    #   class: logging.handlers.RotatingFileHandler
    #   filename: /srv/backups/debug.log
    #   formatter: basic
    #   encoding: utf-8
    #   maxBytes: 5242880 # 5 MiB
    #   backupCount: 2
    #   level: NOISE
  # loggers:
  #   twisted:
  #     handlers: [console]
  #     level: 0
  root:
    level: custom
    handlers: [console]


manhole:
  # Manhole interface provides SSH access to interactive python terminal.
  # It might be useful when app hangs unexpectedly,
  #  for general debugging or to test/produce some artificial state.
  # Disabled by default. Can be enabled by specifying client ssh key and endpoint to listen on.

  # endpoint specifies an interface/port for manhole to listen on.
  # For twisted endpoint syntax, see twisted.internet.endpoints.html#clientFromString
  # See also "signal" option below.
  endpoint: # set only if you want manhole enabled, example: tcp:8022:interface=localhost

  # If set, will make tool create manhole socket
  #  (see "endpoint" option above) only after receiving specified signal.
  # Signal can be specified as name
  #  (with or without SIG prefix, examples: INT, TERM, SIGUSR1) or an integer.
  # Sending same signal again will close the socket.
  on_signal:

  # Authorized client(s) public SSH key(s).
  # Can be either single key string or a list of keys, newlines will be folded.
  # client: |
  #   ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDFc7KNw/YDKKqwyRKeoM3D
  #     2APvRT0QPBHQAC7ksw2uLks+/MJtdQWi21TSqFTn+bN6ci9JM4+zMSEWs4
  #     yKELpc8DMqSvCBr225grHW/Q==
  client:

  # Server keys don't really have to be secret if access is limited to localhost.
  # Use "ssh-keygen" (included with openssh) to generate these.
  server:

    # Public SSH key, as produced by e.g. ssh-keygen (will be joined into a single line)
    public: |
      ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCkpC6exWYC9OBK8bYZkf2YKNPZS+
        6cFrt2FvEzgVO4Rj/61+aC/DUmJdRyHwxqibmFHkJQndjV6RCsQ3pdKkYSA1dQ4b
        5Vt4GdYPAqraMi6wXioWi04WZW+nM+auC07IXtgDUHt3uPEzS+skYyEJKL3QijX+
        6zeBzs4nm7jl7rM9gWHzB+WIG1hWzqVT1WXH90kg98BJ99DbZYm3Ap4sQO1p+CN1
        wCns9WZ7pK21ZjHUoQJNpCny5he7aMKMlMbpwnu7b5y4lLjkI1JKqd54n8+wkH/M
        VMI78PpaYCnRQnok9ljKopx77w4h9aZ1EshsV2jRoZJjsTiSgEbOajxRhl

    # Private SSH key
    private: |
      -----BEGIN RSA PRIVATE KEY-----
      MIIEogIBAAKCAQEApKQunsVmAvTgSvG2GZH9mCjT2UvunBa7dhbxM4FTuEY/+tfm
      gvw1JiXUch8Maom5hR5CUJ3Y1ekQrEN6XSpGEgNXUOG+VbeBnWDwKq2jIusF4qFo
      tOFmVvpzPmrgtOyF7YA1B7d7jxM0vrJGMhCSi90Io1/us3gc7OJ5u45e6zPYFh8w
      fliBtYVs6lU9Vlx/dJIPfASffQ22WJtwKeLEDtafgjdcAp7PVme6SttWYx1KECTa
      Qp8uYXu2jCjJTG6cJ7u2+cuJS45CNSSqneeJ/PsJB/zFTCO/D6WmAp0UJ6JPZYyq
      Kce+8OIfWmdRLIbFdo0aGSY7E4koBGzmo8UYZQIDAQABAoIBAHsdZttFQ24sjVid
      fQ2L9PWGejyAonJIMXAx4bYhHGis54T9U5tZW6kmGsIn45H7YSZhJTfBgXccLGKU
      pvjp9rHbm7yYwkq4yYzVA2L2qwoecy0wg+rWrj+WUv020MeaIuAhwgX+N8AanZOI
      HiOr7tn1tFLvFsFPrVmaVWtiICqCS+7sXoh+w2VIGcE6c8RUIRMViTMVAzf9sPMh
      ixYeOIBjhTl7Tfyt3r+WLscTcJMRRAdJQLyqlSDzLGVX/kcRQAeFf/qTX0vNm0sN
      M6uHDwhBLUm9+qCtT6yuZ5OLUuUbaAvDXWGAkDHZZFVbZPIbx8UMYikvVxeZXk5M
      rRrlcnUCgYEA1STjDoc+uURbf1LfC4BPEyrnxxkTHDZgdLC7Lhyr7jxn888+bZlM
      kgB2ch41+gLUQar2jQObHGi1/CoOLH8TS6kR4CsmZixZ6dSjpY+Wm7jHFuMsttex
      qgN3AuQ1iiQx1OND5SAUeNuRUHsHb4i5DrepvS05UNgTmgQMxk28Zn8CgYEAxb65
      lW57i8Cal/Za6pMxvIH2pwRAYnCKU1rQEYkGmJCw/k1aJd86I+Yfl/9AHw1L58Uj
      upBZERoSeTbdcHEbnEGEScgKWQ+0xTyBLDWURwwqrmxxzBwiIt6hdtOwlJbaEgyA
      mwN5UAxKiztK/svRod4D//T1vIZa1fMnf7KfNxsCgYB/1kbksNM69TfXjtG+KS/E
      NEidjnl6w1ZoxpMNnh60ncBPZ+5ud7KIIwTnfx0qnUXHOQ31F8ORb3AvFN45a+Ib
      0ASrqdW3FES9TU71fsB7F4E5RfnMlGO3r6pSrqM5/mlw4PoY03vT3QUz+wZDrAIq
      RJfmodgtl9tx1Zn/2iH0awKBgF+XWF1dYEnpnJHzXHXjG/r1lIeebYVow+WRk922
      MMMVxwnX2MlQBOoPt5whnxyjr9rlmOT6HKRAx0djd16AvwklPs7v7dip2Ag0vHjj
      mb9SqVtSPxydSP80QjeQE99woRByjMTixAUnO+3cht9vJfKqwaI9B4HQLR8aATEg
      5wibAoGAGoC6IMErquKdJCNLmse32fOY9O2Rzt2/9qATx4fmWJeef0d2ckLt3nqV
      sQsHUwmAO1pEy/LUlv72SRt/voB9jiPvp9HTVeHIBi9hYnlSWUVhpFPk9WI89zhn
      jSF8lwdYUGteETbvOPUH5Sil0qCv4nCJzqoBXUAhQhw2aJ6ZWZk=
      -----END RSA PRIVATE KEY-----
